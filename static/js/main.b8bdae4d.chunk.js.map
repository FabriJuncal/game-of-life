{"version":3,"sources":["components/BtnGuardarCargar.jsx","App.js","reportWebVitals.js","index.js"],"names":["BtnGuardarCargar","nroGrilla","grillaSeleccionado","actGrillaSeleccionado","guardarCargarGrilla","actualizarRecorrido","Button","id","variant","color","onClick","e","btnSeleccionado","isNaN","target","parentNode","split","parseInt","grillaGuardada","JSON","parse","localStorage","getItem","length","operaciones","App","grillaGuardada1","grillaGuardada2","grillaGuardada3","nroTurno1","nroTurno2","nroTurno3","nroTurnoActual","setItem","stringify","grillaAux","grillaBase","cantColumnasInicial","cantFilaInicial","i","arrayColumnas","Array","from","push","useState","cantColumnas","actualizarCantColumnas","cantFila","actualizarCantFila","grilla","actualizarGrilla","recorrido","tiempoTurno","actualizarTiempoTurno","contadorTurnos","actualizarContTurnos","recorridoRef","useRef","current","turnoActualRef","correrSimulaciÃ³n","useCallback","g","produce","grillaCopia","j","vecinos","forEach","x","y","fila_i","columna_j","setTimeout","actualizarTamanioGrilla","p_cantColumnas","p_cantFilas","p_grilla","nroColumnas","nroFilas","nroGrillaGuardada","operacion","nroFila","Grid","container","direction","justifyContent","alignItems","item","xs","spacing","style","marginRight","width","Typography","gutterBottom","Slider","defaultValue","step","marks","value","label","min","max","valueLabelDisplay","onChange","tiempo","textContent","TextField","type","helperText","display","alignContent","gridTemplateColumns","map","filas","columnas","nuevaGrilla","actualizarEstadoGrilla","height","backgroundColor","undefined","border","borderRadius","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8bdae4d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst BtnGuardarCargar = ({nroGrilla, grillaSeleccionado, actGrillaSeleccionado, guardarCargarGrilla, actualizarRecorrido}) => {\r\n\r\n\r\n  return(\r\n    <Button id={\"btnGuardarCargar-\"+nroGrilla} variant={grillaSeleccionado === nroGrilla ? 'contained' : 'outlined'} color='primary'\r\n      onClick={(e)=>{\r\n\r\n        let btnSeleccionado = isNaN(e.target.parentNode.id.split('-')[1]) ? e.target.id.split('-')[1] : e.target.parentNode.id.split('-')[1];\r\n        btnSeleccionado = parseInt(btnSeleccionado);\r\n\r\n        let grillaGuardada = JSON.parse(localStorage.getItem('grilla'+nroGrilla)) ? JSON.parse(localStorage.getItem('grilla'+nroGrilla)) : [];\r\n\r\n        if(btnSeleccionado !== grillaSeleccionado && grillaGuardada.length > 0){\r\n          guardarCargarGrilla(nroGrilla, 'cargar');\r\n        }if(btnSeleccionado !== grillaSeleccionado && grillaGuardada.length === 0){\r\n          guardarCargarGrilla(nroGrilla, 'guardar');\r\n        }else if(btnSeleccionado === grillaSeleccionado){\r\n          guardarCargarGrilla(nroGrilla, 'guardar');\r\n        }\r\n\r\n        actGrillaSeleccionado(nroGrilla);\r\n        actualizarRecorrido(false);\r\n      }}\r\n   >{grillaSeleccionado === nroGrilla ? 'Guardar '+nroGrilla : 'Cargar  '+nroGrilla}</Button>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default BtnGuardarCargar;","import React, {useState, useRef, useCallback} from \"react\";\r\n// La librerÃ­a Immer ayudarÃ¡ a seguir el paradigma de datos inmutables\r\n// y harÃ¡ que la actualizaciÃ³n de un Estado sea mucho mas sencilla\r\nimport produce from \"immer\";\r\n// La librerÃ­a Material UI se utilizarÃ¡ para tener un estilo definido para los botÃ³nes\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n// Botones personalizados de Guardar/Cargar Grilla\r\nimport BtnGuardarCargar from '../src/components/BtnGuardarCargar';\r\n\r\n// Se define las operaciones para poder indentificar las cÃ©lulas vecinas\r\n// Si realizamos una suma con cada uno de estos array con la posiciÃ³n en la que estamos ubicados, obtendremos las posiciones de las 8 cÃ©lulas vecinas que puede tener cada una de estas\r\n// Ejemplo:\r\n//    -1,-1 | -1,0 | -1,1\r\n//   _______|______|______\r\n//     0,-1 |CÃ©lula| 0,1\r\n//   _______|______|______\r\n//     1,-1 |  1,0 | 1,1\r\n\r\nconst operaciones = [\r\n  [-1, -1], // Noroeste\r\n  [-1, 0],  // Norte\r\n  [-1, 1],  // Noreste\r\n  [0, 1],   // Este\r\n  [1, 1],   // Sureste\r\n  [1, 0],   // Sur\r\n  [1, -1],  // Suroeste\r\n  [0, -1],  // Oeste\r\n]\r\n\r\nfunction App() {\r\n// ===============================================================================================================================\r\n  /* \r\n    Este cÃ³digo crea las Columnas y Filas con un valor 0 para cada CÃ©lula (Es decir, carga la grilla con cÃ©lulas muertas).\r\n    Tambien carga las grillas almacenadas en el Local Storage.\r\n    Si una grilla se encuentra almacenada en el Slot 1, esta se cargarÃ¡ de forma predeterminada al recargar la pÃ¡gina.\r\n  */\r\n\r\n  // Cargamos las grillas almacenadas en el Local Storage\r\n  let grillaGuardada1 = JSON.parse(localStorage.getItem('grilla1')) ? JSON.parse(localStorage.getItem('grilla1')) : [];\r\n  let grillaGuardada2 = JSON.parse(localStorage.getItem('grilla2')) ? JSON.parse(localStorage.getItem('grilla2')) : [];\r\n  let grillaGuardada3 = JSON.parse(localStorage.getItem('grilla3')) ? JSON.parse(localStorage.getItem('grilla3')) : [];\r\n\r\n  let nroTurno1 = localStorage.getItem('nroTurno1') ? parseInt(localStorage.getItem('nroTurno1')) : 0;\r\n  let nroTurno2 = localStorage.getItem('nroTurno2') ? parseInt(localStorage.getItem('nroTurno2')) : 0;\r\n  let nroTurno3 = localStorage.getItem('nroTurno3') ? parseInt(localStorage.getItem('nroTurno3')) : 0;\r\n\r\n  let nroTurnoActual = nroTurno1;\r\n\r\n  if(grillaGuardada1.length === 0){\r\n    localStorage.setItem('grilla1', JSON.stringify([]));\r\n  }\r\n\r\n  if(grillaGuardada2.length === 0){\r\n    localStorage.setItem('grilla2', JSON.stringify([]));\r\n  }\r\n\r\n  if(grillaGuardada3.length === 0){\r\n    localStorage.setItem('grilla3', JSON.stringify([]));\r\n  }\r\n\r\n  let grillaBase = [];\r\n  let grillaAux;\r\n\r\n\r\n  let cantColumnasInicial = grillaGuardada1.length > 0 ? grillaGuardada1[0].length : 50;\r\n  let cantFilaInicial = grillaGuardada1.length  > 0 ? grillaGuardada1.length : 30;\r\n\r\n  // Iteramos sobre la cantidad de Filas definidas para ir cargando las columnas en cada una de las filas\r\n  for (let i = 0; i < cantFilaInicial; i++){\r\n\r\n    // A cada valor del array de Columnas le agrega el valor 0\r\n    let arrayColumnas = Array.from(Array(cantColumnasInicial), () => 0);\r\n    // Cargamos las Columnas dentro de cada Fila y de esta manera se va armando la grilla\r\n    grillaBase.push(arrayColumnas);\r\n  }\r\n\r\n  // En el caso que se encuentre la grilla 1 almacenada en el Local Storage, se carga automaticamente\r\n  if(grillaGuardada1.length > 0){\r\n    grillaAux = grillaGuardada1;\r\n  }else{ // Sino se carga la grilla predefinida sin cÃ©lulas vivas\r\n    grillaAux = grillaBase;\r\n  }\r\n  // ===============================================================================================================================\r\n  /*DefiniciÃ³n de Hooks*/\r\n  const [cantColumnas, actualizarCantColumnas] = useState(cantColumnasInicial);\r\n  const [cantFila, actualizarCantFila] = useState(cantFilaInicial);\r\n  const [grilla, actualizarGrilla] = useState(grillaAux);\r\n  const [grillaSeleccionado, actGrillaSeleccionado] = useState(1);\r\n  const [recorrido, actualizarRecorrido] = useState(false);\r\n  const [tiempoTurno, actualizarTiempoTurno] = useState(300);\r\n  const [contadorTurnos, actualizarContTurnos] = useState(0);\r\n\r\n\r\n  // Se utiliza el Hook \"useRef\" para que no se pierda la asignaciÃ³n de las variable despuÃ©s de cada renderizado.\r\n  // Estas variables se utilizarÃ¡n en el proceso de ejecuciÃ³n de la simulaciÃ³n y por lo tanto se necesita que persistan en el tiempo con sus valores\r\n  const recorridoRef = useRef(recorrido);\r\n  recorridoRef.current = recorrido;\r\n\r\n  const turnoActualRef = useRef(contadorTurnos);\r\n  turnoActualRef.current = contadorTurnos;\r\n\r\n  // La funciÃ³n correrSimulaciÃ³n() ejecuta la simulaciÃ³n de la evoluciÃ³n de las cÃ©lulas por turno\r\n  // Se utiliza el Hook \"useCallback\" para almacenar la funciÃ³n en memoria y no volver a cargar la funciÃ³n cada vez que React renderice los componentes, ya que la funciÃ³n contiene muchos calculos.\r\n  // Esta es una buena manera de hacer el cÃ³digo mas eficiente\r\n  const correrSimulaciÃ³n = useCallback(() => {\r\n\r\n      if(!recorridoRef.current){\r\n        return;\r\n      }\r\n\r\n      actualizarGrilla(g => {\r\n        // Se utiliza la funciÃ³n \"produce\" de la librerÃ­a \"Immer\" para actualizar el estado \"grilla\" de una manera muy sensilla\r\n        return produce(g,  grillaCopia =>{\r\n          // Recorre cada celda de la grilla (SerÃ­a cada cÃ©lula)\r\n          for (let i = 0; i < cantFila; i++){\r\n            for (let j = 0; j < cantColumnas; j++){\r\n              let vecinos = 0;\r\n              // Busca cadÃ¡ cÃ©lula vecina.\r\n              // Se utiliza el array \"operaciones\" definido previamente para realizar la suma con la posiciÃ³n en la que se encuentra la secuencia (Es decir, la cÃ©lula del centro)\r\n              // y de esta manera obtener las posiciones de las 8 cÃ©lulas vecinas que tiene cada una de estas (Excluyendo las cÃ©lulas de los bordes)\r\n              operaciones.forEach(([x , y]) => {\r\n                const fila_i = i + x;\r\n                const columna_j = j + y;\r\n                \r\n                // Validamos que las cÃ©lulas vecinas se encuentren dentro del rango de la grilla\r\n                if(fila_i >= 0 && fila_i < cantFila && columna_j >= 0 && columna_j < cantColumnas){\r\n                  // Se suma cadÃ¡ valor de las cÃ©lulas vecinas encontradas\r\n                  // (Cada cÃ©lula viva vale 1 y las muertas valen 0, por lo tanto si se encuentra 3 cÃ©lulas vecinas vivas, al finalizar la secuencia la variable \"vecino\" tendrÃ­a que valer 3)\r\n                  vecinos += g[fila_i][columna_j];\r\n                  \r\n                }\r\n                \r\n              });\r\n\r\n              // Una vez terminado las repeticiones para obtener el valor de las 8 cÃ©lulas vecinas  validamos:\r\n              // Si la cÃ©lula analizada contiene menos de 2 cÃ©lulas vecinas vivas o contiene mÃ¡s de 3 cÃ©lulas vecinas vivas, esta muere \r\n              // (Por lo tanto se le agrega el valor de 0 en la posiciÃ³n de la grila)\r\n              if(vecinos < 2 || vecinos > 3){\r\n                grillaCopia[i][j] = 0;\r\n              \r\n              // Si la cÃ©lula analizada se encuentra muerta (con el valor 0) y se encuentra que tiene 3 cÃ©lulas vecinas (con el valor 1), Esta revive\r\n              // (Por lo tanto se le agrega el valor de 1 en la posiciÃ³n de la grila)\r\n              }else if (g[i][j] === 0 && vecinos === 3){\r\n                grillaCopia[i][j] = 1;\r\n              }\r\n\r\n            }\r\n            \r\n          }\r\n          \r\n        });\r\n      });\r\n   // Ejecuta la simulaciÃ³n de la evoluciÃ³n de las cÃ©lulas por turno deacuerdo al tiempo que se le este pasando la funciÃ³n setTimeout()\r\n      setTimeout(() => {\r\n        correrSimulaciÃ³n();\r\n    // Se lleva la cuenta de los turnos que se van ejecutando\r\n        nroTurnoActual = turnoActualRef.current + 1;\r\n        actualizarContTurnos(nroTurnoActual);\r\n      }, tiempoTurno);\r\n\r\n      \r\n    },\r\n    [cantColumnas,cantFila, tiempoTurno, contadorTurnos]);\r\n\r\n\r\n\r\n\r\n// ===============================================================================================================================\r\n/*DefiniciÃ³n de Funciones*/\r\n\r\n  // FunciÃ³n que se utiliza para actualizar el tamaÃ±o de la grilla cada vez que se modifican los valores de las Filas y Columnas\r\n  const actualizarTamanioGrilla = (p_cantColumnas, p_cantFilas, p_grilla = []) => {\r\n  \r\n    // Se pausa la simulaciÃ³n para no generar ningÃºn error al modificar las dimensiones de la grilla\r\n    actualizarRecorrido(false);\r\n\r\n    grillaBase = p_grilla;\r\n    \r\n    let nroColumnas = parseInt(p_cantColumnas != null ? p_cantColumnas : 0);\r\n    let nroFilas = parseInt(p_cantFilas != null ? p_cantFilas : 0);\r\n\r\n    actualizarCantColumnas(nroColumnas);\r\n    actualizarCantFila(nroFilas);\r\n\r\n    // Si se pasa como parametro una grilla cargada, no se vuelven a generar las Filas y Columnas\r\n    if( grillaBase.length === 0){\r\n      // Iteramos sobre el total de cÃ©lulas que se obtendrÃ¡ de la multiplicaciÃ³n de las filas y las columnas\r\n      for (let i = 0; i < (nroFilas); i++){\r\n  \r\n        // Creamos la cantidad de columnas asignadas con el valor 0\r\n        let arrayColumnas = Array.from(Array(nroColumnas), () => 0);\r\n        // Cargamos las Columnas dentro de cada Fila\r\n\r\n        grillaBase.push(arrayColumnas);\r\n\r\n        actualizarGrilla(grillaBase);\r\n      }\r\n    }else{\r\n      actualizarGrilla(grillaBase);\r\n    }\r\n\r\n  }\r\n\r\n  // FunciÃ³n que se utiliza para actualizar el estado de la Grilla (Es decir, con esta funciÃ³n podemos seleccionar cada cÃ©lular e ir reviviendolas o matandolas)\r\n  const actualizarEstadoGrilla = (i,j) => {\r\n      // Utilizamos la funciÃ³n \"produce\" de la librerÃ­a \"Immer\" para actualizar el estado \"grilla\" de una manera muy sensilla\r\n      const nuevaGrilla = produce(grilla, grillaCopia => {\r\n        // Si la posiciÃ³n de la grilla que pasamos como parametro tiene un valor de 1, este se actualiza 0 y viceversa\r\n        grillaCopia[i][j] = grillaCopia[i][j] > 0 ? 0 : 1;\r\n      });\r\n      actualizarGrilla(nuevaGrilla);\r\n  }\r\n\r\n  // FunciÃ³n que Inicia o Detiene la SimulaciÃ³n\r\n  const actEstadoBtnSimulacion = () => {\r\n    actualizarRecorrido(!recorrido);\r\n    if(!recorrido){\r\n      recorridoRef.current = true;\r\n      correrSimulaciÃ³n();\r\n    }\r\n  }\r\n\r\n  // FunciÃ³n que Carga o Almacena las grillas y el contador de turnos en el Local Storage segÃºn el Slot que se haya seleccionado\r\n  const guardarCargarGrilla = (nroGrillaGuardada, operacion) => {\r\n\r\n    if(operacion === 'guardar'){\r\n      if(nroGrillaGuardada === 1){\r\n        localStorage.setItem('grilla1', JSON.stringify(grilla));\r\n        localStorage.setItem('nroTurno1', contadorTurnos);\r\n      }\r\n  \r\n      if(nroGrillaGuardada === 2){\r\n        localStorage.setItem('grilla2', JSON.stringify(grilla));\r\n        localStorage.setItem('nroTurno2', contadorTurnos);\r\n      }\r\n  \r\n      if(nroGrillaGuardada === 3){\r\n        localStorage.setItem('grilla3', JSON.stringify(grilla));\r\n        localStorage.setItem('nroTurno3', contadorTurnos);\r\n      }\r\n    }\r\n\r\n    if(operacion === 'cargar'){\r\n\r\n      let nroColumnas;\r\n      let nroFila\r\n      ;\r\n      if(nroGrillaGuardada === 1){\r\n        grillaGuardada1 = JSON.parse(localStorage.getItem('grilla1'));\r\n        nroTurno1 = parseInt(localStorage.getItem('nroTurno1'));\r\n        nroTurnoActual = nroTurno1;\r\n        actualizarContTurnos(nroTurnoActual);\r\n        nroColumnas = grillaGuardada1.length > 0 ? grillaGuardada1[0].length : 50;\r\n        nroFila = grillaGuardada1.length  > 0 ? grillaGuardada1.length : 30;\r\n        actualizarTamanioGrilla(nroColumnas, nroFila, grillaGuardada1);\r\n      }\r\n  \r\n      if(nroGrillaGuardada === 2){\r\n        grillaGuardada2 = JSON.parse(localStorage.getItem('grilla2'));\r\n        nroTurno2 = parseInt(localStorage.getItem('nroTurno2'));\r\n        nroTurnoActual = nroTurno2;\r\n        actualizarContTurnos(nroTurnoActual);\r\n        nroColumnas = grillaGuardada2.length > 0 ? grillaGuardada2[0].length : 50;\r\n        nroFila = grillaGuardada2.length  > 0 ? grillaGuardada2.length : 30;\r\n        actualizarTamanioGrilla(nroColumnas, nroFila, grillaGuardada2);\r\n      }\r\n  \r\n      if(nroGrillaGuardada === 3){\r\n        grillaGuardada3 = JSON.parse(localStorage.getItem('grilla3'));\r\n        nroTurno3 = parseInt(localStorage.getItem('nroTurno3'));\r\n        nroTurnoActual = nroTurno3;\r\n        actualizarContTurnos(nroTurnoActual);\r\n        nroColumnas = grillaGuardada3.length > 0 ? grillaGuardada3[0].length : 50;\r\n        nroFila = grillaGuardada3.length  > 0 ? grillaGuardada3.length : 30;\r\n        actualizarTamanioGrilla(nroColumnas, nroFila, grillaGuardada3);\r\n      }\r\n    }\r\n  }\r\n\r\n// ===============================================================================================================================\r\n  return (\r\n\r\n    <>\r\n      <Grid container direction=\"column\" justifyContent=\"center\" >\r\n        <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\">\r\n          <Grid container direction=\"row\" item xs={3} spacing={0}>\r\n            <Grid item xs={4}\r\n            style={{marginRight: '-24px'}}\r\n            >\r\n            {/* BotÃ³n de Empezar/Parar simulaciÃ³n\r\n                Al hacer click sobre el botÃ³n, este detecta si se se quiere empezar la simulaciÃ³n o se quiere parar\r\n            */}\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                onClick={()=>{actEstadoBtnSimulacion()}}\r\n                style={{width: '98.4px'}}\r\n              >{recorrido ? 'Parar' : 'Empezar'}</Button>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n            {/* BotÃ³n de Siguiente Turno\r\n                Al hacer click sobre el botÃ³n, se avanza al siguiente turno en la simulaciÃ³n\r\n            */}\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                  onClick={()=>{\r\n                    actualizarRecorrido(false);\r\n                    recorridoRef.current = true;\r\n                    correrSimulaciÃ³n();\r\n                    recorridoRef.current = false;\r\n                  }}\r\n              ><NavigateNextIcon/></Button>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n            {/* BotÃ³n Restablecer CÃ©lulas y dimensiÃ³n de la Grilla\r\n                Al hacer click sobre el botÃ³n, este restablece las cÃ©lulas y el tamaÃ±o de la grilla a los valores predefinidos al inicio\r\n            */}\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                onClick={()=>{\r\n                  actualizarTamanioGrilla(50,30);\r\n                  actualizarContTurnos(0);\r\n                  nroTurnoActual = 0;\r\n                }}\r\n              >Restablecer</Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container direction=\"row\" justifyContent=\"center\" item xs={4} spacing={6}>\r\n            <Grid item xs={3} >\r\n              {/* Slot 1 para cargar o almacenar la Grilla en el Local Storage\r\n                  Al hacer click sobre el botÃ³n este verificarÃ¡ que el Slot se encuentre vaciÃ³ o no,\r\n                  y si ya lo tenemos seleccionado, dependiendo de estos factores se podrÃ¡ Almacenar o Cargar la grilla\r\n              */}\r\n              <BtnGuardarCargar\r\n                nroGrilla={1}\r\n                grillaSeleccionado={grillaSeleccionado}\r\n                actGrillaSeleccionado={actGrillaSeleccionado}\r\n                guardarCargarGrilla={guardarCargarGrilla}\r\n                actualizarRecorrido={actualizarRecorrido}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {/* Slot 2 para cargar o almacenar la Grilla en el Local Storage\r\n                  Al hacer click sobre el botÃ³n este verificarÃ¡ que el Slot se encuentre vaciÃ³ o no,\r\n                  y si ya lo tenemos seleccionado, dependiendo de estos factores se podrÃ¡ Almacenar o Cargar la grilla\r\n              */}\r\n              <BtnGuardarCargar\r\n                nroGrilla={2}\r\n                grillaSeleccionado={grillaSeleccionado}\r\n                actGrillaSeleccionado={actGrillaSeleccionado}\r\n                guardarCargarGrilla={guardarCargarGrilla}\r\n                actualizarRecorrido={actualizarRecorrido}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {/* Slot 3 para cargar o almacenar la Grilla en el Local Storage\r\n                  Al hacer click sobre el botÃ³n este verificarÃ¡ que el Slot se encuentre vaciÃ³ o no,\r\n                  y si ya lo tenemos seleccionado, dependiendo de estos factores se podrÃ¡ Almacenar o Cargar la grilla\r\n              */}\r\n              <BtnGuardarCargar\r\n                nroGrilla={3}\r\n                grillaSeleccionado={grillaSeleccionado}\r\n                actGrillaSeleccionado={actGrillaSeleccionado}\r\n                guardarCargarGrilla={guardarCargarGrilla}\r\n                actualizarRecorrido={actualizarRecorrido}\r\n              />\r\n          </Grid>\r\n          </Grid>\r\n          <Grid  item xs={2}>\r\n              {/* Slider para configurar el tiempo de ejecuciÃ³n de la simulaciÃ³n */}\r\n              <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n              Tiempo de EjecuciÃ³n\r\n              </Typography>\r\n              <Slider\r\n                defaultValue={300}\r\n                aria-labelledby=\"discrete-slider-small-steps\"\r\n                step={100}\r\n                marks={[\r\n                  {value: 100,label: '0,1s'},\r\n                  {value: 500,label: '0,5s'},\r\n                  {value: 1000,label: '1s'}\r\n                ]}\r\n                min={100}\r\n                max={1000}\r\n                valueLabelDisplay=\"auto\"\r\n                onChange={(e) => {\r\n                  let tiempo = parseInt(e.target.textContent);\r\n                  if(!isNaN(tiempo) && tiempo !== 0){\r\n                    actualizarTiempoTurno(tiempo);\r\n                    actualizarRecorrido(false);\r\n                  }\r\n                }}\r\n              />\r\n          </Grid>\r\n          <Grid container direction=\"column\" alignItems=\"center\" item xs={3}>\r\n          {/* Campos para configurar el TamaÃ±o de la Grilla */}\r\n            <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n            TamaÃ±o de la Grilla\r\n            </Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\r\n              <Grid item xs={5}>\r\n                <TextField id=\"n-filas\" label=\"Filas\"\r\n                  type=\"number\"\r\n                  value={cantFila}\r\n                  helperText=\"Valores permitidos entre 0 y 100\"\r\n                  onChange={(e) => {\r\n                    if( 0 <= e.target.value && e.target.value <= 100){\r\n                      actualizarTamanioGrilla(cantColumnas, e.target.value ? e.target.value : 0);\r\n                    }\r\n\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={5}>\r\n                <TextField  id=\"n-columnas\" label=\"Columnas\" \r\n                  type=\"number\"\r\n                  value={cantColumnas}\r\n                  helperText=\"Valores permitidos entre 0 y 100\"\r\n                  onChange={(e) => {\r\n                    if( 0 <= e.target.value && e.target.value <= 100){\r\n                      actualizarTamanioGrilla(e.target.value ? e.target.value : 0, cantFila);\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>       \r\n        <Grid  container direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n              Turno: {contadorTurnos}\r\n            </Typography>\r\n          </Grid>  \r\n        <Grid container direction=\"column\" alignContent=\"center\">\r\n          <Grid  item xs>\r\n            {/* Grilla donde se verÃ¡n el conjunto de cÃ©lulas */}\r\n            <div\r\n              // Una vez que tenemos la 1er columna armada utilizamos Grid para repetir/crear la cantidad de Columnas que se asignÃ³\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${cantColumnas}, 25px)`\r\n              }}\r\n            >\r\n              {/* Iteramos sobre el array \"grilla\" y \"filas\" para poder ir agregando cada cÃ©lula en cada fila y de este modo armar una columna */}\r\n              {grilla.map((filas, i) => \r\n                filas.map((columnas, j) => (\r\n                  <div\r\n                    key={`${i}-${j}`}\r\n                    onClick={()=>{actualizarEstadoGrilla(i,j)}} // Al hacer click en una cÃ©lula, esta muere o revive dependiendo del estado actual\r\n                    style={{\r\n                      width: 20,\r\n                      height: 20,\r\n                      backgroundColor: grilla[i][j] ? \"#007bff\" : undefined, // Si el valor de la posiciÃ³n es 1, se pinta la celula de color Azul\r\n                      border: \"solid 1px #007bff\",\r\n                      borderRadius: '20px',\r\n                      margin: '3px 5px'\r\n                    }}\r\n                  />\r\n                ))\r\n              )}\r\n            </div>\r\n          </Grid> \r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}